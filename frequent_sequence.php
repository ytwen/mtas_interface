<?php  session_start();  include_once("../../include/PostgreDB.class.php");  include("../../include/geo.class.php");  set_time_limit(0);  // For pst behavior  $db=new DB();  $range = $_POST['range']; // minimum_latitude, minimum_longitude, maximum_latitude, maximum_longitude  $time_l = $_POST['time_l'];  $time_h = $_POST['time_h'];  $speed_l = $_POST['speed_l'];  $speed_h = $_POST['speed_h'];  $support = $_POST['support_1'];  $size = $_POST['size'];  $coordinate = explode(',', $range);//22.275, 118.703,23.231, 120.325  $Sbound = $coordinate[0]; $Wbound = $coordinate[1]; $Nbound = $coordinate[2]; $Ebound = $coordinate[3];  $split=new Geo();  $rectBounds = $split -> splitRects($Sbound,$Wbound,$Nbound,$Ebound,$size);  $sql = "SELECT * FROM mtas.ship_training WHERE creation_time BETWEEN '$time_l' and '$time_h' AND sog BETWEEN '$speed_l' and '$speed_h' AND point(latitude,longitude) @ box'$range' ORDER BY tid,creation_time";  $result=$db->query($sql);  $num = $db->num_rows();  $fp = fopen('output/ship_sequence','w');  // exp record  $fp2 = fopen('output/pst_table_pre_exp.csv','w');  $record2 = '';  // exp record#  $pre_index = -1;  for ($i=0; $i<$num; $i++) {    if ($i==0) {      $tid = pg_result($result,$i,'tid');      $record="$tid:";      $tempIndex=array();    }    else if (pg_result($result,$i,'tid')!= $tid) {      $pre_index = -1;      fwrite($fp,$record);      $tid = pg_result($result,$i,'tid');      $record="\n$tid:";      $tempIndex=array();    }    $lat = pg_result($result,$i,'latitude');     $lng = pg_result($result,$i,'longitude');     $cog = pg_result($result,$i,'cog');     $sog = pg_result($result,$i,'sog');    $creation_time = pg_result($result,$i,'creation_time');    if ($lat<= $rectBounds[$pre_index]->north && $lat> $rectBounds[$pre_index]->south && $lng<= $rectBounds[$pre_index]->east && $lng> $rectBounds[$pre_index]->west){      continue;    }        foreach($rectBounds AS $index=>$rect) {      if ($lat<= $rect->north && $lat> $rect->south && $lng<= $rect->east && $lng> $rect->west) {        // first grid        if ($pre_index==-1){          $record .= "$index";          $rectBounds[$index]->count=($rectBounds[$index]->count)+1;          $tempIndex[$index] ++;        }        // compute direction & speed over grid sequences        else {  // already check not duplicate          $record .= " $index";          if ($tempIndex[$index] < 1) {            $rectBounds[$index]->count=($rectBounds[$index]->count)+1;  // count tid            $tempIndex[$index] ++;          }          // distance in m          $distance = ($split -> distance ($lat,$lng,$pre_lat,$pre_lng)) * 1000;          $speed = round(( $distance / (strtotime($creation_time) - strtotime($pre_time)) ) * 1.943844492441,1);          $direction = round( $split -> bearing ($pre_lat,$pre_lng,$lat,$lng) ,1) ;          if ($direction < 0) $direction += 360;          // tid, pattern, next, direction, speed//echo "$tid, $pre_index, $index, $direction, $speed / cog=$cog sog=$sog $lat,$lng,$pre_lat,$pre_lng <br>";          $record2 .= "$tid, $pre_index, $index, $direction, $speed\n";        }        $pre_index = $index;           $pre_lat = $lat;        $pre_lng = $lng;        $pre_time = $creation_time;            break;      }    }  }  fwrite($fp,$record);  fclose($fp);  fwrite($fp2,$record2);  fclose($fp2);  foreach($rectBounds AS $index=>$rect) {    $Sbound = $rect->south; $Wbound = $rect->west; $Nbound = $rect->north; $Ebound = $rect->east;    $count = $rect->count;    echo "<script>drawRects($Sbound,$Wbound,$Nbound,$Ebound,$index,$count,$support);</script>";  // for demo  }  $_SESSION['rectBounds']=$rectBounds;?>